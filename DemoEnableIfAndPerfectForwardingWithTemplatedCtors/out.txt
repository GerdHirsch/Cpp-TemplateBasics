DemoEnableIfAndPerfectForwardingWithTemplatedCtors
befor block
Member m1, m2;
Member::Member()
Member::Member()
=== auto p1 = makeUnique<Base>(m1, m2);
std::unique_ptr<_Tp> makeUnique(Arg&& ...) [with T = Base; Arg = {Member&, Member&}]
Member::Member(const Member&)
Member::Member(const Member&)
Base::Base(T1&&, T2&&) [with T1 = Member&; T2 = Member&; <template-parameter-1-3> = void]
=== auto p2 = makeUnique<Base>(Member(), Member());
Member::Member()
Member::Member()
std::unique_ptr<_Tp> makeUnique(Arg&& ...) [with T = Base; Arg = {Member, Member}]
Member::Member(Member&&)
Member::Member(Member&&)
Base::Base(T1&&, T2&&) [with T1 = Member; T2 = Member; <template-parameter-1-3> = void]
Member::~Member()
Member::~Member()
=== auto p3 = makeUnique<Base>(Member(), m2);
Member::Member()
std::unique_ptr<_Tp> makeUnique(Arg&& ...) [with T = Base; Arg = {Member, Member&}]
Member::Member(Member&&)
Member::Member(const Member&)
Base::Base(T1&&, T2&&) [with T1 = Member; T2 = Member&; <template-parameter-1-3> = void]
Member::~Member()
end block
Base::~Base()
Member::~Member()
Member::~Member()
Base::~Base()
Member::~Member()
Member::~Member()
Base::~Base()
Member::~Member()
Member::~Member()
Member::~Member()
Member::~Member()
after block
